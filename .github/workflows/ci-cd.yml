name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: telegram_chat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.0
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Lint code
      run: pnpm lint
    
    - name: Type check
      run: pnpm build
    
    - name: Run unit tests
      run: pnpm test:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/telegram_chat_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Run integration tests
      run: pnpm test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/telegram_chat_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Generate test coverage
      run: pnpm test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/telegram_chat_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.0
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
    
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [api, web]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.0
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Install Playwright browsers
      run: pnpm --filter web exec playwright install --with-deps
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Run E2E tests
      run: pnpm --filter web test:e2e
      env:
        BASE_URL: http://localhost:5173
        API_URL: http://localhost:3000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: apps/web/test-results/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags
        sed -i "s|telegram-chat/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:develop|g" k8s/api.yaml
        sed -i "s|telegram-chat/web:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:develop|g" k8s/web.yaml
        
        # Apply configurations
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/
        
        # Wait for deployment
        kubectl rollout status deployment/api -n telegram-chat --timeout=300s
        kubectl rollout status deployment/web -n telegram-chat --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Run basic health checks
        curl -f https://staging-api.chat.example.com/health
        curl -f https://staging.chat.example.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags
        sed -i "s|telegram-chat/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:main|g" k8s/api.yaml
        sed -i "s|telegram-chat/web:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:main|g" k8s/web.yaml
        
        # Apply configurations
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/
        
        # Rolling update with zero downtime
        kubectl rollout status deployment/api -n telegram-chat --timeout=600s
        kubectl rollout status deployment/web -n telegram-chat --timeout=600s
    
    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Run comprehensive health checks
        curl -f https://api.chat.example.com/health
        curl -f https://chat.example.com/health
        
        # Test critical endpoints
        curl -f https://api.chat.example.com/auth/health
        curl -f https://api.chat.example.com/chat/health

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow